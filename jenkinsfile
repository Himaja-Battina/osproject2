pipeline {
    agent any
    stages {
        stage('Deploy Application') {
            steps {
                // Configure OpenShift cluster credentials
                withCredentials([string(credentialsId: 'ocp-server-url', variable: 'OCP_SERVER_URL'),
                                  string(credentialsId: 'cluster-auth-token', variable: 'CLUSTER_AUTH_TOKEN'),
                                 
                                  string(credentialsId: 'openshift-cluster-url-2', variable: 'OPENSHIFT_CLUSTER_URL_2'),
                                  string(credentialsId: 'openshift-cluster-token-2', variable: 'OPENSHIFT_CLUSTER_TOKEN_2')]) {
                    // Configure RHACM credentials
                    //withCredentials([string(credentialsId: 'rhacm-server-url', variable: 'RHACM_SERVER_URL'),
                                     // string(credentialsId: 'rhacm-auth-token', variable: 'RHACM_AUTH_TOKEN')]) {
                        // Login to OpenShift cluster 1
                        script{
                       sh 'oc --server=$OCP_SERVER_URL --token=$CLUSTER_AUTH_TOKEN new-project newprojecty --insecure-skip-tls-verify'
                        // Deploy application to OpenShift cluster 1
                        try {
                            sh 'oc --server=$OCP_SERVER_URL --token=$CLUSTER_AUTH_TOKEN project newprojecty --insecure-skip-tls-verify && oc --server=$OCP_SERVER_URL --token=$CLUSTER_AUTH_TOKEN apply -f application-deployment.yaml'
                            // Break out of loop if deployment is successful
                            break
                        } catch (Exception e) {
                            // Log error and continue to next cluster
                            echo "Deployment failed on OpenShift cluster 1. Error: ${e}"
                        }
                        }
                        // Login to OpenShift cluster 2
                        script{
                          sh 'oc --server=$OCP_SERVER_URL2 --token=$CLUSTER_AUTH_TOKEN2 new-project newprojecty --insecure-skip-tls-verify'
                        // Deploy application to OpenShift cluster 2
                        try {
                           sh 'oc --server=$OCP_SERVER_URL2 --token=$CLUSTER_AUTH_TOKEN2 project newprojecty --insecure-skip-tls-verify && oc --server=$OCP_SERVER_URL2 --token=$CLUSTER_AUTH_TOKEN2 apply -f application-deployment.yaml'
                            // Break out of loop if deployment is successful
                            break
                        } catch (Exception e) {
                            // Log error and continue to next cluster
                            echo "Deployment failed on OpenShift cluster 2. Error: ${e}"
                        }
                        // Log error if deployment fails on all clusters
                        echo "Deployment failed on all OpenShift clusters."
                        }
                    //}
                }
            }
        }
    }
}
