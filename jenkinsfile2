pipeline {
  agent any
  environment {
    OCP_SERVER_URL = credentials('ocp-server-url')
    CLUSTER_AUTH_TOKEN = credentials('cluster-auth-token')
    OPENSHIFT_CLUSTER_URL_2 = credentials('openshift-cluster-url-2')
    OPENSHIFT_CLUSTER_TOKEN_2 = credentials('openshift-cluster-token-2')
  }
   
          
  stages {
    stage('Login to OpenShift Cluster') {
      steps {
        script {
         
          
          //def code = sh(script: """curl -L -k -I -s -w '%{code}' -H 'Authorization: Bearer sha256~g06oXjlYZeJML0lz4_NDx5RGF8IAnyNFn90VtBsDiVg' \$OCP_SERVER_URL""", returnStdout: true)
          def codeOutput = sh(script: """curl -L -k -I -s -w '\\n%{http_code}\\n' -H 'Authorization: Bearer ${CLUSTER_AUTH_TOKEN}' ${OCP_SERVER_URL}""", returnStdout: true).trim()
def response_code = codeOutput.tokenize('\n')[-1].toInteger()

            /*def match = code =~ /(200|401|404|503)/
            if (match.find()) {
                def responseCodeStr = match.group(0)
                response_code=responseCodeStr.toInteger()
            
            println "Response code: ${response_code}"
            if(response_code==200){
              println "hi"
            }*/
if(response_code!=null){
            if (response_code == 200 || response_code=="200") {
              def clusterStatusOutput = sh(script: 'oc --server=\$OCP_SERVER_URL --token=\$CLUSTER_AUTH_TOKEN get nodes', returnStdout: true)
              if (clusterStatusOutput.contains('Ready')) {
                try {
                  sh 'oc --server=\$OCP_SERVER_URL --token=\$CLUSTER_AUTH_TOKEN project newprojectg --insecure-skip-tls-verify && oc --server=\$OCP_SERVER_URL --token=\$CLUSTER_AUTH_TOKEN apply -f application-deployment.yaml'
                  // Break out of loop if deployment is successful
                } catch (Exception e) {
                  // Log error and continue to next cluster
                  echo "Deployment failed on OpenShift cluster 1. Error: ${e}"
                }
              }
              else{
                echo "Cluster is not ready"
                env.deploy_on_failure = 'true'
              }
            }
            else if(response_code == 404 || response_code=="404"){
              error "incorrect URL"
            }
            else if (response_code == 401 || response_code=="401") {
              error "Failed to login to OpenShift cluster. Authentication failed. HTTP response code: ${response_code}"
            } else if (response_code == 503 || response_code=="503") {
              error "Failed to login to OpenShift cluster. Cluster is down. HTTP response code: ${response_code}"
              echo "Cluster is not ready"
              env.deploy_on_failure = 'true'
            } else {
              error "Failed to login to OpenShift cluster. HTTP response code: ${response_code}"
            }
          } else {
            println "No matching response codes found"
          }
        }
      }
    
   

    stage('Deploy to cluster 2'){
      when {
        environment name: 'DEPLOY_ON_FAILURE', value: 'true'
      }
      steps {
        script {
          node {
            try {
              sh 'oc --server=\$OPENSHIFT_CLUSTER_URL_2 --token=\$OPENSHIFT_CLUSTER_TOKEN_2 project zfw-jenkins-ocpadmins --insecure-skip-tls-verify && oc --server=\$OPENSHIFT_CLUSTER_URL_2 --token=\$OPENSHIFT_CLUSTER_TOKEN_2 apply -f application-deployment.yaml'
              // Break out of loop if deployment is successful
            } catch (Exception e) {
              // Log error and continue to next cluster
              echo "Deployment failed on OpenShift cluster 2. Error: ${e}"
            }
            // Log error if deployment fails on all clusters
          }
        }
      }
    }
  }
	}
}
